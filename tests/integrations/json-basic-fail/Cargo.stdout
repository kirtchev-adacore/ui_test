
running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished 

{ "type": "suite", "event": "started" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/bad_pattern.rs () - ../basic-fail/tests/actual_tests/bad_pattern.rs" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/executable.rs () - ../basic-fail/tests/actual_tests/executable.rs" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/executable_compile_err.rs () - ../basic-fail/tests/actual_tests/executable_compile_err.rs" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/exit_code_fail.rs () - ../basic-fail/tests/actual_tests/exit_code_fail.rs" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/filters.rs () - ../basic-fail/tests/actual_tests/filters.rs" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/foomp.rs () - ../basic-fail/tests/actual_tests/foomp.rs" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/foomp2.rs () - ../basic-fail/tests/actual_tests/foomp2.rs" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/ice_annotations.rs () - ../basic-fail/tests/actual_tests/ice_annotations.rs" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/inline_chain.rs () - ../basic-fail/tests/actual_tests/inline_chain.rs" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/joined_wrong_order.rs () - ../basic-fail/tests/actual_tests/joined_wrong_order.rs" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/lone_joined_pattern.rs () - ../basic-fail/tests/actual_tests/lone_joined_pattern.rs" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/pattern_too_many_arrow.rs () - ../basic-fail/tests/actual_tests/pattern_too_many_arrow.rs" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/pattern_too_many_arrow_above.rs () - ../basic-fail/tests/actual_tests/pattern_too_many_arrow_above.rs" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/rustc_ice.rs () - ../basic-fail/tests/actual_tests/rustc_ice.rs" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/touching_above_below.rs () - ../basic-fail/tests/actual_tests/touching_above_below.rs" }
{ "type": "test", "event": "started", "name": "../basic-fail/tests/actual_tests/touching_above_below_chain.rs () - ../basic-fail/tests/actual_tests/touching_above_below_chain.rs" }
{ "type": "test", "event": "ok", "name": "../basic-fail/tests/actual_tests/bad_pattern.rs (Building dependencies) - ../basic-fail/tests/actual_tests/bad_pattern.rs" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/bad_pattern.rs () - ../basic-fail/tests/actual_tests/bad_pattern.rs", "stdout": "command: <\"rustc\" \"--error-format=json\" \"--out-dir\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/0/../basic-fail/tests/actual_tests\" \"../basic-fail/tests/actual_tests/bad_pattern.rs\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail.rlib\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail-$HASH.rmeta\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"--edition\" \"2021\"> stdout: <error[E0432]: unresolved import `basic_fail`\n --> ../basic-fail/tests/actual_tests/bad_pattern.rs:1:5\n  |\n1 | use basic_fail::add;\n  |     ^^^^^^^^^^ use of undeclared crate or module `basic_fail`\n\nerror: aborting due to 1 previous error\n\nFor more information about this error, try `rustc --explain E0432`.\n> stderr: <>" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/executable.rs () - ../basic-fail/tests/actual_tests/executable.rs", "stdout": "command: <\"rustc\" \"--error-format=json\" \"--out-dir\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/0/../basic-fail/tests/actual_tests\" \"../basic-fail/tests/actual_tests/executable.rs\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail.rlib\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail-$HASH.rmeta\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"--edition\" \"2021\"> stdout: <error[E0432]: unresolved import `basic_fail`\n --> ../basic-fail/tests/actual_tests/executable.rs:1:5\n  |\n1 | use basic_fail::add;\n  |     ^^^^^^^^^^ use of undeclared crate or module `basic_fail`\n\nerror: aborting due to 1 previous error\n\nFor more information about this error, try `rustc --explain E0432`.\n> stderr: <>" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/executable_compile_err.rs () - ../basic-fail/tests/actual_tests/executable_compile_err.rs", "stdout": "command: <\"rustc\" \"--error-format=json\" \"--out-dir\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/0/../basic-fail/tests/actual_tests\" \"../basic-fail/tests/actual_tests/executable_compile_err.rs\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail.rlib\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail-$HASH.rmeta\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"--edition\" \"2021\"> stdout: <error: this file contains an unclosed delimiter\n --> ../basic-fail/tests/actual_tests/executable_compile_err.rs:4:2\n  |\n3 | fn main() {\n  |           - unclosed delimiter\n4 |\n  |  ^\n\nerror: aborting due to 1 previous error\n\n> stderr: <>" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/exit_code_fail.rs () - ../basic-fail/tests/actual_tests/exit_code_fail.rs", "stdout": "command: <\"rustc\" \"--error-format=json\" \"--out-dir\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/0/../basic-fail/tests/actual_tests\" \"../basic-fail/tests/actual_tests/exit_code_fail.rs\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail.rlib\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail-$HASH.rmeta\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"--edition\" \"2021\"> stdout: <> stderr: <>" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/filters.rs () - ../basic-fail/tests/actual_tests/filters.rs", "stdout": "command: <parse comments> stdout: <> stderr: <>" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/foomp.rs () - ../basic-fail/tests/actual_tests/foomp.rs", "stdout": "command: <\"rustc\" \"--error-format=json\" \"--out-dir\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/0/../basic-fail/tests/actual_tests\" \"../basic-fail/tests/actual_tests/foomp.rs\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail.rlib\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail-$HASH.rmeta\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"--edition\" \"2021\"> stdout: <error[E0432]: unresolved import `basic_fail`\n --> ../basic-fail/tests/actual_tests/foomp.rs:1:5\n  |\n1 | use basic_fail::add;\n  |     ^^^^^^^^^^ use of undeclared crate or module `basic_fail`\n\nerror: aborting due to 1 previous error\n\nFor more information about this error, try `rustc --explain E0432`.\n> stderr: <>" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/foomp2.rs () - ../basic-fail/tests/actual_tests/foomp2.rs", "stdout": "command: <\"rustc\" \"--error-format=json\" \"--out-dir\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/0/../basic-fail/tests/actual_tests\" \"../basic-fail/tests/actual_tests/foomp2.rs\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail.rlib\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail-$HASH.rmeta\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"--edition\" \"2021\"> stdout: <error[E0432]: unresolved import `basic_fail`\n --> ../basic-fail/tests/actual_tests/foomp2.rs:1:5\n  |\n1 | use basic_fail::add;\n  |     ^^^^^^^^^^ use of undeclared crate or module `basic_fail`\n\nerror: aborting due to 1 previous error\n\nFor more information about this error, try `rustc --explain E0432`.\n> stderr: <>" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/ice_annotations.rs () - ../basic-fail/tests/actual_tests/ice_annotations.rs", "stdout": "command: <RUSTC_BOOTSTRAP=\"1\" RUSTC_ICE=\"0\" \"rustc\" \"--error-format=json\" \"--out-dir\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/0/../basic-fail/tests/actual_tests\" \"../basic-fail/tests/actual_tests/ice_annotations.rs\" \"-Ztreat-err-as-bug\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail.rlib\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail-$HASH.rmeta\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"--edition\" \"2021\"> stdout: <error: internal compiler error[E0432]: unresolved import `basic_fail`\n --> ../basic-fail/tests/actual_tests/ice_annotations.rs:5:5\n  |\n5 | use basic_fail::add;\n  |     ^^^^^^^^^^ use of undeclared crate or module `basic_fail`\n\nthread 'rustc' panicked at compiler/rustc_errors/src/lib.rs:\naborting due to `-Z treat-err-as-bug=1`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.78.0 (9b00956e5 2024-04-29) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z treat-err-as-bug\n\nquery stack during panic:\n#0 [resolver_for_lowering_raw] getting the resolver for lowering\nend of query stack\n> stderr: <>" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/inline_chain.rs () - ../basic-fail/tests/actual_tests/inline_chain.rs", "stdout": "command: <parse comments> stdout: <> stderr: <>" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/joined_wrong_order.rs () - ../basic-fail/tests/actual_tests/joined_wrong_order.rs", "stdout": "command: <parse comments> stdout: <> stderr: <>" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/lone_joined_pattern.rs () - ../basic-fail/tests/actual_tests/lone_joined_pattern.rs", "stdout": "command: <parse comments> stdout: <> stderr: <>" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/pattern_too_many_arrow.rs () - ../basic-fail/tests/actual_tests/pattern_too_many_arrow.rs", "stdout": "command: <parse comments> stdout: <> stderr: <>" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/pattern_too_many_arrow_above.rs () - ../basic-fail/tests/actual_tests/pattern_too_many_arrow_above.rs", "stdout": "command: <parse comments> stdout: <> stderr: <>" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/rustc_ice.rs () - ../basic-fail/tests/actual_tests/rustc_ice.rs", "stdout": "command: <RUSTC_BOOTSTRAP=\"1\" RUSTC_ICE=\"0\" \"rustc\" \"--error-format=json\" \"--out-dir\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/0/../basic-fail/tests/actual_tests\" \"../basic-fail/tests/actual_tests/rustc_ice.rs\" \"-Ztreat-err-as-bug\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail.rlib\" \"--extern\" \"json_basic_fail=$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug/libjson_basic_fail-$HASH.rmeta\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"-L\" \"$DIR/tests/integrations/json-basic-fail/../../../target/$TMP/$TRIPLE/debug\" \"--edition\" \"2021\"> stdout: <error: internal compiler error[E0432]: unresolved import `basic_fail`\n --> ../basic-fail/tests/actual_tests/rustc_ice.rs:5:5\n  |\n5 | use basic_fail::add;\n  |     ^^^^^^^^^^ use of undeclared crate or module `basic_fail`\n\nthread 'rustc' panicked at compiler/rustc_errors/src/lib.rs:\naborting due to `-Z treat-err-as-bug=1`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.78.0 (9b00956e5 2024-04-29) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z treat-err-as-bug\n\nquery stack during panic:\n#0 [resolver_for_lowering_raw] getting the resolver for lowering\nend of query stack\n> stderr: <>" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/touching_above_below.rs () - ../basic-fail/tests/actual_tests/touching_above_below.rs", "stdout": "command: <parse comments> stdout: <> stderr: <>" }
{ "type": "test", "event": "failed", "name": "../basic-fail/tests/actual_tests/touching_above_below_chain.rs () - ../basic-fail/tests/actual_tests/touching_above_below_chain.rs", "stdout": "command: <parse comments> stdout: <> stderr: <>" }
{ "type": "suite", "event": "failed", "passed": 0, "failed": 16, "ignored": 0, "measured": 0, "filtered_out": 0 }

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished 

